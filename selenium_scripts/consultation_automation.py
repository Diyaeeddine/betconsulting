import sys
import time
import json
import os
import logging
import re
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException
from webdriver_manager.chrome import ChromeDriverManager
import pyautogui
import pyperclip  # Pour la solution copier-coller

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('consultation_automation.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ConsultationAutomation:
    def __init__(self):
        self.driver = None
        self.wait = None
        self.marche_reference = None  # Nouvelle variable pour stocker la r√©f√©rence
        self.button_folder_mapping = {}  # Nouveau: mapping bouton -> dossier
        self.results = {
            'success': False,
            'message': '',
            'steps_completed': [],
            'errors': [],
            'timestamp': datetime.now().isoformat()
        }

    def clean_folder_name(self, folder_name):
        """Nettoie le nom du dossier pour cr√©er un nom de dossier valide"""
        try:
            logger.info(f"üßπ Nettoyage du nom de dossier: {folder_name}")
            
            # Remplacer les caract√®res sp√©ciaux par des underscores ou les supprimer
            clean_name = re.sub(r'[<>:"/\\|?*]', '_', folder_name)  # Caract√®res interdits Windows
            clean_name = clean_name.replace(' ', '_')  # Espaces -> underscores
            clean_name = clean_name.replace("'", '_')  # AJOUT: Apostrophes -> underscores
            clean_name = clean_name.replace('/', '_')  # Slash -> underscores (garder les points)
            
            # Supprimer les underscores multiples
            clean_name = re.sub(r'_+', '_', clean_name)
            
            # Supprimer les underscores en d√©but/fin
            clean_name = clean_name.strip('_')
            
            # S'assurer que ce n'est pas vide
            if not clean_name:
                clean_name = "DEFAULT_FOLDER"
            
            logger.info(f"üßπ Nom de dossier nettoy√©: {clean_name}")
            return clean_name
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors du nettoyage du nom de dossier: {str(e)}")
            return "DEFAULT_FOLDER"

    def extract_button_folder_mapping(self):
        """Extrait et mappe chaque bouton 'Ajouter une ou plusieurs pi√®ces libres' avec son dossier correspondant"""
        try:
            logger.info("üóÇÔ∏è Extraction du mapping boutons -> dossiers...")
            
            # Trouver tous les boutons "Ajouter une ou plusieurs pi√®ces libres"
            button_selectors = [
                "a.ajout-el[onclick*='ajouterPieceLibreApplet']",
                "a[id*='ajouterPieceLibreApplet']",
                "//a[contains(text(), 'Ajouter une ou plusieurs pi√®ces libres')]",
                "//a[@class='ajout-el' and contains(@onclick, 'ajouterPieceLibreApplet')]"
            ]
            
            all_buttons = []
            
            for selector in button_selectors:
                try:
                    if selector.startswith("//"):
                        buttons = self.driver.find_elements(By.XPATH, selector)
                    else:
                        buttons = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    
                    if buttons:
                        logger.info(f"‚úÖ Trouv√© {len(buttons)} bouton(s) avec le s√©lecteur: {selector}")
                        all_buttons.extend(buttons)
                        break
                        
                except Exception as e:
                    continue
            
            if not all_buttons:
                logger.warning("‚ö†Ô∏è Aucun bouton trouv√© pour le mapping")
                return True
            
            # Pour chaque bouton, trouver le titre du dossier correspondant dans sa section parente
            for i, button in enumerate(all_buttons):
                try:
                    button_id = button.get_attribute("id") or f"button_{i+1}"
                    logger.info(f"üîç Recherche du dossier pour le bouton {i+1} (ID: {button_id})...")
                    
                    folder_name = None
                    
                    # CORRECTION PRINCIPALE: Remonter dans l'arbre DOM pour trouver la section parente
                    # puis chercher le titre dans cette section
                    
                    # M√©thode 1: Chercher le div parent principal (panelCandidature, panelOffre, etc.)
                    try:
                        # Remonter jusqu'√† trouver un div avec un ID contenant "panel" ou "candidature" ou "offre"
                        parent_divs = [
                            "./ancestor::div[contains(@id, 'panel')]",
                            "./ancestor::div[contains(@id, 'candidature')]", 
                            "./ancestor::div[contains(@id, 'Offre')]",
                            "./ancestor::div[contains(@id, 'listeOffres')]"
                        ]
                        
                        main_parent_div = None
                        for div_xpath in parent_divs:
                            try:
                                main_parent_div = button.find_element(By.XPATH, div_xpath)
                                logger.info(f"‚úÖ Div parent trouv√©: {main_parent_div.get_attribute('id')}")
                                break
                            except NoSuchElementException:
                                continue
                        
                        if main_parent_div:
                            # Chercher la premi√®re table avec thead dans ce div parent
                            try:
                                first_table_with_thead = main_parent_div.find_element(By.CSS_SELECTOR, "table.table-results.tableau-reponse.margin-0 thead")
                                if first_table_with_thead:
                                    # Chercher le lien avec la classe title-toggle-open dans ce thead
                                    title_element = first_table_with_thead.find_element(By.CSS_SELECTOR, "a.title-toggle-open")
                                    folder_name = title_element.text.strip()
                                    logger.info(f"‚úÖ Titre trouv√© dans la section parente: {folder_name}")
                            except NoSuchElementException:
                                # M√©thode alternative: chercher tous les a.title-toggle-open dans le div parent
                                try:
                                    title_elements = main_parent_div.find_elements(By.CSS_SELECTOR, "a.title-toggle-open")
                                    if title_elements:
                                        # Prendre le premier titre trouv√©
                                        folder_name = title_elements[0].text.strip()
                                        logger.info(f"‚úÖ Titre trouv√© via recherche alternative: {folder_name}")
                                except:
                                    pass
                        
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Erreur lors de la recherche dans la section parente: {str(e)}")
                    
                    # M√©thode 2: Si toujours pas trouv√©, chercher par proximit√© avec l'ID du bouton
                    if not folder_name:
                        try:
                            # Analyser l'ID du bouton pour deviner la section
                            if "candidature" in button_id.lower():
                                # Chercher sp√©cifiquement dans la section candidature
                                candidature_titles = self.driver.find_elements(By.XPATH, "//div[contains(@id, 'candidature')]//a[@class='title-toggle-open']")
                                if candidature_titles:
                                    folder_name = candidature_titles[0].text.strip()
                                    logger.info(f"‚úÖ Titre trouv√© via analyse candidature: {folder_name}")
                            elif "offre" in button_id.lower() or "listeoffres" in button_id.lower():
                                # Chercher sp√©cifiquement dans la section offre
                                offre_titles = self.driver.find_elements(By.XPATH, "//div[contains(@id, 'Offre') or contains(@id, 'listeOffres')]//a[@class='title-toggle-open']")
                                if offre_titles:
                                    folder_name = offre_titles[0].text.strip()
                                    logger.info(f"‚úÖ Titre trouv√© via analyse offre: {folder_name}")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erreur lors de l'analyse par ID: {str(e)}")
                    
                    # M√©thode 3: Fallback - chercher tous les titres et les associer par ordre
                    if not folder_name:
                        try:
                            all_titles = self.driver.find_elements(By.CSS_SELECTOR, "a.title-toggle-open")
                            if all_titles and i < len(all_titles):
                                folder_name = all_titles[i].text.strip()
                                logger.info(f"‚úÖ Titre trouv√© via fallback (index {i}): {folder_name}")
                        except:
                            pass
                    
                    # M√©thode 4: Dernier fallback bas√© sur l'index
                    if not folder_name:
                        folder_name = f"Dossier_{i+1}"
                        logger.warning(f"‚ö†Ô∏è Titre non trouv√©, utilisation du fallback: {folder_name}")
                    
                    # Nettoyer le nom du dossier
                    clean_folder_name = self.clean_folder_name(folder_name)
                    
                    # Stocker le mapping
                    self.button_folder_mapping[button_id] = clean_folder_name
                    
                    logger.info(f"üóÇÔ∏è Mapping cr√©√©: {button_id} -> {folder_name} -> {clean_folder_name}")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur lors du mapping du bouton {i+1}: {str(e)}")
                    # Fallback
                    button_id = button.get_attribute("id") or f"button_{i+1}"
                    self.button_folder_mapping[button_id] = f"Dossier_{i+1}"
            
            logger.info(f"üéØ Mapping complet cr√©√©: {len(self.button_folder_mapping)} bouton(s) mapp√©(s)")
            for btn_id, folder in self.button_folder_mapping.items():
                logger.info(f"   üìÅ {btn_id} -> {folder}")
            
            self.results['steps_completed'].append(f"Mapping boutons-dossiers cr√©√©: {len(self.button_folder_mapping)} √©l√©ments")
            
            return True
            
        except Exception as e:
            error_msg = f"‚ùå Erreur lors de l'extraction du mapping: {str(e)}"
            logger.error(error_msg)
            self.results['errors'].append(error_msg)
            return True  # On continue m√™me en cas d'erreur

    def clean_path_for_typing(self, path):
        """Nettoie le chemin avant la saisie avec PyAutoGUI pour √©viter les erreurs de formatage"""
        try:
            logger.info(f"üîß Nettoyage du chemin original: {path}")
            
            # CORRECTION PRINCIPALE: Forcer C:\ au d√©but du chemin
            if 'xampp' in path:
                # Trouver la position de "xampp" dans le chemin
                xampp_position = path.find('xampp')
                # Prendre tout ce qui suit "xampp" (inclus)
                path_after_xampp = path[xampp_position:]
                # Coller C:\ au d√©but
                path = f"C:\\{path_after_xampp}"
                logger.info(f"üîß Chemin forc√© avec C:\\ (xampp trouv√©): {path}")
            else:
                # Si pas de "xampp" trouv√©, essayer de corriger le chemin
                # 1. Corriger C/\ en C:\
                if path.startswith('C/\\'):
                    path = path.replace('C/\\', 'C:\\')
                # 2. Corriger C/ en C:\
                elif path.startswith('C/'):
                    path = path.replace('C/', 'C:\\')
                # 3. Corriger C\ en C:\
                elif path.startswith('C\\'):
                    path = path.replace('C\\', 'C:\\')
                # 4. Si √ßa ne commence pas par C:, forcer C:\ au d√©but
                elif not path.startswith('C:\\'):
                    # Enlever tout ce qui pourrait √™tre au d√©but (C, C:, etc.)
                    if path.startswith('C'):
                        path = path[1:].lstrip(':\\/')
                    path = f"C:\\{path}"
                
                logger.info(f"üîß Chemin corrig√© (sans xampp): {path}")
            
            # Corrections suppl√©mentaires
            # 2. Corriger marche8public en marche_public
            path = path.replace('marche8public', 'marche_public')
            
            # 3. Corriger imported8files en imported_files
            path = path.replace('imported8files', 'imported_files')
            
            # 4. Traiter sp√©cifiquement la r√©f√©rence du march√©
            if self.marche_reference:
                path_parts = path.split('\\')
                if len(path_parts) > 0:
                    last_part = path_parts[-1]
                    
                    # Si la r√©f√©rence contient des caract√®res probl√©matiques
                    if last_part == self.marche_reference:
                        # CORRECTION: Nettoyer la r√©f√©rence : remplacer SEULEMENT / par _ (garder les points)
                        corrected_last_part = last_part.replace('/', '_')  # Seulement les slashes
                        path_parts[-1] = corrected_last_part
                        
                        # Reconstruire le chemin
                        path = '\\'.join(path_parts)
            
            # 5. V√©rification finale: s'assurer que le chemin commence bien par C:\
            if not path.startswith('C:\\'):
                logger.warning(f"‚ö†Ô∏è Le chemin ne commence toujours pas par C:\\: {path}")
                # Forcer une derni√®re fois
                path = f"C:\\{path.lstrip('C:\\/')}"
            
            logger.info(f"üîß Chemin final corrig√©: {path}")
            return path
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors du nettoyage du chemin: {str(e)}")
            return path  # Retourner le chemin original en cas d'erreur

    def setup_driver(self):
        """Configure et initialise le driver Chrome"""
        try:
            logger.info("üöÄ Initialisation du driver Chrome...")
            
            chrome_options = Options()
            chrome_options.add_argument("--start-maximized")
            chrome_options.add_argument("--guest")
            chrome_options.add_argument("--disable-blink-features=AutomationControlled")
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            chrome_options.add_argument("--disable-web-security")
            chrome_options.add_argument("--allow-running-insecure-content")
            chrome_options.add_argument("--disable-extensions")
            
            # Installation automatique du ChromeDriver
            service = Service(ChromeDriverManager().install())
            
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            # Configuration du timeout
            self.wait = WebDriverWait(self.driver, 20)
            
            logger.info("‚úÖ Driver Chrome initialis√© avec succ√®s")
            self.results['steps_completed'].append("Driver Chrome configur√©")
            
        except Exception as e:
            error_msg = f"‚ùå Erreur lors de l'initialisation du driver: {str(e)}"
            logger.error(error_msg)
            self.results['errors'].append(error_msg)
            raise

    def extract_marche_reference(self):
        """Extrait et stocke la r√©f√©rence du march√© depuis la page"""
        try:
            logger.info("üîç Extraction de la r√©f√©rence du march√©...")
            
            # S√©lecteurs sp√©cifiques pour trouver la r√©f√©rence
            reference_selectors = [
                "#ctl0_CONTENU_PAGE_detailConsultation_reference",  # ID sp√©cifique du span
                "span[id='ctl0_CONTENU_PAGE_detailConsultation_reference']",
                "span[id*='reference']",
                "//span[@id='ctl0_CONTENU_PAGE_detailConsultation_reference']",  # XPath
                "//span[contains(@id, 'reference')]"
            ]
            
            reference_found = None
            
            for selector in reference_selectors:
                try:
                    if selector.startswith("//"):
                        # XPath
                        element = self.driver.find_element(By.XPATH, selector)
                    else:
                        # CSS Selector
                        element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    
                    if element:
                        reference_text = element.text.strip()
                        if reference_text:
                            reference_found = reference_text
                            logger.info(f"‚úÖ R√©f√©rence trouv√©e avec {selector}: {reference_found}")
                            break
                        
                except Exception as e:
                    continue
            
            # Si pas trouv√©, chercher dans les divs avec classe content-bloc
            if not reference_found:
                try:
                    # Chercher dans les divs qui contiennent "R√©f√©rence" dans le texte pr√©c√©dent
                    reference_divs = self.driver.find_elements(By.XPATH, "//div[contains(text(), 'R√©f√©rence')]/following-sibling::div[@class='content-bloc bloc-500']//span")
                    
                    for div in reference_divs:
                        text = div.text.strip()
                        if text and text != "R√©f√©rence":
                            reference_found = text
                            logger.info(f"‚úÖ R√©f√©rence trouv√©e dans div suivant: {reference_found}")
                            break
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur recherche dans divs: {str(e)}")
            
            # Si toujours pas trouv√©, utiliser une r√©f√©rence par d√©faut
            if not reference_found:
                logger.warning("‚ö†Ô∏è R√©f√©rence non trouv√©e, utilisation de la r√©f√©rence par d√©faut")
                reference_found = "DEFAULT_REF"
            
            # CORRECTION PRINCIPALE: Nettoyer la r√©f√©rence pour cr√©er un nom de dossier valide
            if reference_found:
                # Remplacer les caract√®res sp√©ciaux par des underscores ou les supprimer
                # Garder les lettres, chiffres, tirets, underscores et points
                clean_reference = re.sub(r'[<>:"/\\|?*]', '_', reference_found)  # Caract√®res interdits Windows
                clean_reference = clean_reference.replace(' ', '_')  # Espaces -> underscores
                clean_reference = clean_reference.replace("'", '_')  # AJOUT: Apostrophes -> underscores
                # CORRECTION: NE PAS remplacer les points, seulement les slashes
                clean_reference = clean_reference.replace('/', '_')  # Slash -> underscores (GARDER LES POINTS)
                
                # Supprimer les underscores multiples
                clean_reference = re.sub(r'_+', '_', clean_reference)
                
                # Supprimer les underscores en d√©but/fin
                clean_reference = clean_reference.strip('_')
                
                # S'assurer que ce n'est pas vide
                if not clean_reference:
                    clean_reference = "DEFAULT_REF"
                
                self.marche_reference = clean_reference
                
                logger.info(f"üéØ R√©f√©rence originale: {reference_found}")
                logger.info(f"üéØ R√©f√©rence nettoy√©e stock√©e: {self.marche_reference}")
                self.results['steps_completed'].append(f"R√©f√©rence extraite: {reference_found} -> {self.marche_reference}")
                
                return True
            else:
                raise Exception("Impossible d'extraire la r√©f√©rence")
                
        except Exception as e:
            error_msg = f"‚ùå Erreur lors de l'extraction de la r√©f√©rence: {str(e)}"
            logger.error(error_msg)
            self.results['errors'].append(error_msg)
            # Utiliser la r√©f√©rence pass√©e en param√®tre comme fallback
            return True  # On continue quand m√™me

    def navigate_to_consultation(self, consultation_url):
        """Navigue vers la page de consultation"""
        try:
            logger.info(f"üåê Navigation vers: {consultation_url}")
            
            self.driver.get(consultation_url)
            
            # Attendre que la page soit charg√©e
            self.wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
            
            # Attendre un peu plus pour s'assurer du chargement complet
            time.sleep(3)
            
            # Extraire la r√©f√©rence du march√© d√®s que la page est charg√©e
            self.extract_marche_reference()
            
            current_url = self.driver.current_url
            logger.info(f"‚úÖ Page charg√©e avec succ√®s: {current_url}")
            self.results['steps_completed'].append(f"Navigation vers {consultation_url}")
            
            return True
            
        except Exception as e:
            error_msg = f"‚ùå Erreur lors de la navigation: {str(e)}"
            logger.error(error_msg)
            self.results['errors'].append(error_msg)
            return False

    def handle_system_popup(self, button_id=None):
        """G√®re les popups syst√®me avec PyAutoGUI et saisie automatique du chemin"""
        try:
            logger.info("üîß Gestion du popup syst√®me avec PyAutoGUI...")
            
            # attendre un peu que le popup syst√®me apparaisse
            time.sleep(3)
            
            # simuler la fl√®che gauche (choisir l'option "Toujours ouvrir ce type de lien")
            pyautogui.press('left')
            logger.info("‚úÖ Fl√®che gauche press√©e")
            
            # valider avec Entr√©e
            pyautogui.press('enter')
            logger.info("‚úÖ Entr√©e press√©e pour valider")
            
            # Attendre un peu apr√®s la validation
            time.sleep(2)
            
            logger.info("‚úÖ Popup syst√®me g√©r√© avec succ√®s")
            self.results['steps_completed'].append("Gestion du popup syst√®me avec PyAutoGUI")
            
            # NOUVELLE FONCTIONNALIT√â: Attendre 10 secondes puis g√©rer la popup de s√©lection de fichier
            logger.info("‚è≥ Attente de 10 secondes pour l'apparition de la popup de s√©lection de fichier...")
            time.sleep(10)
            
            # Construire le chemin complet avec la r√©f√©rence ET le dossier sp√©cifique
            base_path = r"C:\xampp\htdocs\betconsulting\storage\app\public\marche_public\imported_files"
            
            # Construire le chemin avec r√©f√©rence
            if self.marche_reference:
                path_with_reference = f"{base_path}\\{self.marche_reference}"
            else:
                path_with_reference = base_path
            
            # NOUVEAU: Ajouter le dossier sp√©cifique selon le bouton cliqu√©
            if button_id and button_id in self.button_folder_mapping:
                folder_name = self.button_folder_mapping[button_id]
                full_path = f"{path_with_reference}\\{folder_name}"
                logger.info(f"üìÅ Chemin avec dossier sp√©cifique: {full_path}")
            else:
                full_path = path_with_reference
                logger.info(f"üìÅ Chemin sans dossier sp√©cifique (bouton non mapp√©): {full_path}")
            
            # NETTOYER LE CHEMIN AVANT LA SAISIE
            clean_full_path = self.clean_path_for_typing(full_path)
            
            logger.info(f"üìÅ Saisie du chemin: {clean_full_path}")
            
            # Effacer le champ d'abord (Ctrl+A puis Delete)
            pyautogui.hotkey('ctrl', 'a')
            time.sleep(0.5)
            pyautogui.press('delete')
            time.sleep(0.5)
            
            # Fonction pour taper le chemin en utilisant copier-coller pour les caract√®res probl√©matiques
            def type_path_with_clipboard_start(text):
                """Tape le chemin en utilisant copier-coller pour C:\ au d√©but et les caract√®res accentu√©s"""
                logger.info("üîÑ D√©marrage de la saisie avec copier-coller pour C:\\ et caract√®res accentu√©s...")
                
                # √âtape 1: Copier et coller "C:\" au d√©but
                try:
                    pyperclip.copy('C:\\')
                    time.sleep(0.1)
                    pyautogui.hotkey('ctrl', 'v')
                    time.sleep(0.1)
                    logger.info("‚úÖ C:\\ coll√© avec succ√®s via le presse-papier")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur lors du copier-coller de C:\\: {str(e)}")
                    # Fallback
                    pyautogui.write('C:\\')
                    time.sleep(0.1)
                
                # √âtape 2: Taper le reste du chemin (apr√®s C:\)
                remaining_path = text[3:] if text.startswith('C:\\') else text
                
                # Caract√®res accentu√©s fran√ßais qui posent probl√®me
                accented_chars = ['√†', '√°', '√¢', '√§', '√£', '√•', '√¶', '√ß', '√®', '√©', '√™', '√´', '√¨', '√≠', '√Æ', '√Ø', '√±', '√≤', '√≥', '√¥', '√∂', '√µ', '√∏', '√π', '√∫', '√ª', '√º', '√Ω', '√ø', '√Ä', '√Å', '√Ç', '√Ñ', '√É', '√Ö', '√Ü', '√á', '√à', '√â', '√ä', '√ã', '√å', '√ç', '√é', '√è', '√ë', '√í', '√ì', '√î', '√ñ', '√ï', '√ò', '√ô', '√ö', '√õ', '√ú', '√ù', '≈∏']
                
                for i, char in enumerate(remaining_path):
                    if char == '_':
                        logger.info(f"üìã Underscore d√©tect√© √† la position {i+3}, utilisation du copier-coller...")
                        try:
                            pyperclip.copy('_')
                            time.sleep(0.1)
                            pyautogui.hotkey('ctrl', 'v')
                            time.sleep(0.05)
                            logger.info("‚úÖ Underscore coll√© avec succ√®s via le presse-papier")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erreur lors du copier-coller de l'underscore: {str(e)}")
                            pyautogui.write('_')
                            time.sleep(0.05)
                    elif char in accented_chars:
                        logger.info(f"üìã Caract√®re accentu√© '{char}' d√©tect√© √† la position {i+3}, utilisation du copier-coller...")
                        try:
                            pyperclip.copy(char)
                            time.sleep(0.1)
                            pyautogui.hotkey('ctrl', 'v')
                            time.sleep(0.05)
                            logger.info(f"‚úÖ Caract√®re accentu√© '{char}' coll√© avec succ√®s via le presse-papier")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erreur lors du copier-coller du caract√®re accentu√© '{char}': {str(e)}")
                            # Fallback : essayer de taper quand m√™me
                            try:
                                pyautogui.write(char)
                                time.sleep(0.05)
                            except:
                                logger.warning(f"‚ö†Ô∏è Impossible de taper le caract√®re '{char}', il sera ignor√©")
                    else:
                        pyautogui.write(char)
                        time.sleep(0.05)
                
                logger.info("‚úÖ Saisie compl√®te termin√©e avec copier-coller pour C:\\, underscores et caract√®res accentu√©s")
            
            # Utiliser la fonction
            type_path_with_clipboard_start(clean_full_path)
            logger.info("‚úÖ Chemin tap√© avec succ√®s (utilisation de copier-coller pour underscore et caract√®res accentu√©s)")
            
            # Appuyer sur Entr√©e pour valider le chemin
            time.sleep(1)
            pyautogui.press('enter')
            logger.info("‚úÖ Entr√©e press√©e pour valider le chemin")
            
            logger.info("üéâ Gestion compl√®te de la s√©lection de fichier termin√©e")
            self.results['steps_completed'].append(f"Chemin automatique saisi: {clean_full_path}")
            
            return True
            
        except Exception as e:
            error_msg = f"‚ùå Erreur lors de la gestion du popup syst√®me: {str(e)}"
            logger.error(error_msg)
            self.results['errors'].append(error_msg)
            return False

    def login_user(self, login="BTPCONSULTING", password="Imane2804"):
        """Effectue le login avec les identifiants fournis"""
        try:
            logger.info("üîê D√©but du processus de login...")
            
            # V√©rifier si le bloc de login est pr√©sent
            login_bloc_selectors = [
                "#ctl0_CONTENU_PAGE_blocLogin",
                "div.form-bloc",
                "div[id*='blocLogin']"
            ]
            
            login_bloc = None
            for selector in login_bloc_selectors:
                try:
                    login_bloc = self.wait.until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                    )
                    logger.info(f"‚úÖ Bloc de login trouv√© avec: {selector}")
                    break
                except TimeoutException:
                    continue
            
            if not login_bloc:
                logger.info("‚ÑπÔ∏è Aucun bloc de login trouv√© - peut-√™tre d√©j√† connect√©")
                return True
            
            # Localiser le champ login
            login_field_selectors = [
                "#ctl0_CONTENU_PAGE_login",
                "input[name*='login']",
                "input.login",
                "input[type='text'][title*='Login']"
            ]
            
            login_field = None
            for selector in login_field_selectors:
                try:
                    login_field = self.wait.until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    logger.info(f"‚úÖ Champ login trouv√© avec: {selector}")
                    break
                except TimeoutException:
                    continue
            
            if not login_field:
                raise Exception("Impossible de trouver le champ login")
            
            # Localiser le champ mot de passe
            password_field_selectors = [
                "#ctl0_CONTENU_PAGE_password",
                "input[name*='password']",
                "input.password",
                "input[type='password']"
            ]
            
            password_field = None
            for selector in password_field_selectors:
                try:
                    password_field = self.wait.until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    logger.info(f"‚úÖ Champ mot de passe trouv√© avec: {selector}")
                    break
                except TimeoutException:
                    continue
            
            if not password_field:
                raise Exception("Impossible de trouver le champ mot de passe")
            
            # Localiser le bouton OK
            ok_button_selectors = [
                "#ctl0_CONTENU_PAGE_authentificationButton",
                "input[name*='authentificationButton']",
                "input[type='image'][alt='OK']",
                "input[title*='Authentification']",
                "input.ok"
            ]
            
            ok_button = None
            for selector in ok_button_selectors:
                try:
                    ok_button = self.wait.until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    logger.info(f"‚úÖ Bouton OK trouv√© avec: {selector}")
                    break
                except TimeoutException:
                    continue
            
            if not ok_button:
                raise Exception("Impossible de trouver le bouton OK")
            
            # Effacer les champs et saisir les donn√©es
            logger.info("üìù Saisie des identifiants...")
            
            # Saisir le login
            login_field.clear()
            login_field.send_keys(login)
            logger.info(f"‚úÖ Login saisi: {login}")
            
            time.sleep(0.5)
            
            # Saisir le mot de passe
            password_field.clear()
            password_field.send_keys(password)
            logger.info("‚úÖ Mot de passe saisi")
            
            time.sleep(0.5)
            
            # Cliquer sur le bouton OK
            logger.info("üñ±Ô∏è Clic sur le bouton OK...")
            
            try:
                ok_button.click()
                logger.info("‚úÖ Clic normal sur OK r√©ussi")
            except ElementClickInterceptedException:
                logger.warning("‚ö†Ô∏è Clic normal intercept√©, tentative avec JavaScript...")
                self.driver.execute_script("arguments[0].click();", ok_button)
                logger.info("‚úÖ Clic JavaScript sur OK r√©ussi")
            
            # Attendre la redirection/chargement apr√®s login
            logger.info("‚è≥ Attente de la redirection apr√®s login...")
            time.sleep(5)
            
            # GESTION DU POPUP SYST√àME AVEC PYAUTOGUI
            self.handle_system_popup()
            
            # V√©rifier si le login a r√©ussi en cherchant si le formulaire de login est toujours pr√©sent
            try:
                # Si on trouve encore le formulaire de login, c'est que √ßa a √©chou√©
                still_login_form = self.driver.find_element(By.CSS_SELECTOR, "#ctl0_CONTENU_PAGE_blocLogin")
                if still_login_form.is_displayed():
                    # V√©rifier s'il y a un message d'erreur
                    error_messages = self.driver.find_elements(By.CSS_SELECTOR, ".error, .alert, .message-erreur")
                    if error_messages:
                        error_text = error_messages[0].text
                        raise Exception(f"√âchec du login - Message d'erreur: {error_text}")
                    else:
                        raise Exception("√âchec du login - Le formulaire de login est toujours pr√©sent")
            except NoSuchElementException:
                # Le formulaire n'est plus l√†, c'est bon signe
                pass
            
            logger.info("‚úÖ Login effectu√© avec succ√®s!")
            self.results['steps_completed'].append(f"Login r√©ussi avec l'utilisateur: {login}")
            
            return True
            
        except Exception as e:
            error_msg = f"‚ùå Erreur lors du login: {str(e)}"
            logger.error(error_msg)
            self.results['errors'].append(error_msg)
            return False

    def click_depot_tab(self):
        """Clique sur l'onglet D√©p√¥t"""
        try:
            logger.info("üéØ Recherche de l'onglet 'D√©p√¥t'...")
            
            # Plusieurs s√©lecteurs possibles pour l'onglet D√©p√¥t
            selectors = [
                "#onglet3",  # ID direct
                "a[id='onglet3']",  # S√©lecteur par attribut ID
                "a.etape-5",  # Par classe CSS
                "a[title=' '][class='etape-5']",  # Par titre et classe
                "#ctl0_CONTENU_PAGE_onglet3 a",  # Par l'ID du conteneur parent
                "div.tab a:contains('D√©p√¥t')",  # Par contenu du texte (si support√©)
                "//a[contains(text(), 'D√©p√¥t')]",  # XPath par texte
            ]
            
            depot_element = None
            used_selector = None
            
            for selector in selectors:
                try:
                    if selector.startswith("//"):
                        # XPath
                        depot_element = self.wait.until(
                            EC.element_to_be_clickable((By.XPATH, selector))
                        )
                    else:
                        # CSS Selector
                        depot_element = self.wait.until(
                            EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                        )
                    
                    used_selector = selector
                    break
                    
                except TimeoutException:
                    continue
            
            if not depot_element:
                raise Exception("Impossible de trouver l'onglet D√©p√¥t avec tous les s√©lecteurs")
            
            logger.info(f"‚úÖ Onglet D√©p√¥t trouv√© avec le s√©lecteur: {used_selector}")
            
            # Scroll vers l'√©l√©ment si n√©cessaire
            self.driver.execute_script("arguments[0].scrollIntoView(true);", depot_element)
            time.sleep(1)
            
            # Tentatives de clic avec diff√©rentes m√©thodes
            click_success = False
            
            # M√©thode 1: Clic normal
            try:
                depot_element.click()
                click_success = True
                logger.info("‚úÖ Clic normal sur l'onglet D√©p√¥t r√©ussi")
            except ElementClickInterceptedException:
                logger.warning("‚ö†Ô∏è Clic normal intercept√©, tentative avec JavaScript...")
                
                # M√©thode 2: Clic JavaScript
                try:
                    self.driver.execute_script("arguments[0].click();", depot_element)
                    click_success = True
                    logger.info("‚úÖ Clic JavaScript sur l'onglet D√©p√¥t r√©ussi")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Clic JavaScript √©chou√©: {str(e)}")
            
            if not click_success:
                # M√©thode 3: D√©clencher l'√©v√©nement onclick directement
                try:
                    onclick_value = depot_element.get_attribute("onclick")
                    if onclick_value:
                        # Ex√©cuter le code onclick
                        js_code = onclick_value.replace("return false", "").replace("return true", "")
                        self.driver.execute_script(js_code)
                        click_success = True
                        logger.info("‚úÖ Ex√©cution du onclick directe r√©ussie")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Ex√©cution onclick √©chou√©e: {str(e)}")
            
            if not click_success:
                raise Exception("Toutes les m√©thodes de clic ont √©chou√©")
            
            # Attendre que l'onglet soit activ√©/affich√©
            time.sleep(3)
            
            logger.info("‚úÖ Onglet D√©p√¥t cliqu√© avec succ√®s")
            self.results['steps_completed'].append("Clic sur l'onglet D√©p√¥t")
            
            return True
            
        except Exception as e:
            error_msg = f"‚ùå Erreur lors du clic sur l'onglet D√©p√¥t: {str(e)}"
            logger.error(error_msg)
            self.results['errors'].append(error_msg)
            return False

    def wait_for_page_complete_load(self):
        """Attend le chargement complet de la page apr√®s le clic sur D√©p√¥t"""
        try:
            logger.info("‚è≥ Attente du chargement complet de la page...")
            
            # Attendre que le document soit pr√™t
            self.wait.until(
                lambda driver: driver.execute_script("return document.readyState") == "complete"
            )
            
            # Attendre que jQuery termine si pr√©sent
            try:
                self.wait.until(
                    lambda driver: driver.execute_script("return jQuery.active") == 0
                )
            except:
                # jQuery pourrait ne pas √™tre pr√©sent
                pass
            
            # Attente suppl√©mentaire pour les √©l√©ments dynamiques
            time.sleep(5)
            
            logger.info("‚úÖ Chargement complet de la page termin√©")
            self.results['steps_completed'].append("Attente du chargement complet")
            
            return True
            
        except Exception as e:
            error_msg = f"‚ùå Erreur lors de l'attente du chargement: {str(e)}"
            logger.error(error_msg)
            self.results['errors'].append(error_msg)
            return False

    def click_repondre_consultation(self):
        """Clique sur le bouton 'R√©pondre √† la consultation'"""
        try:
            logger.info("üéØ Recherche du bouton 'R√©pondre √† la consultation'...")
            
            # Plusieurs s√©lecteurs possibles pour le bouton
            selectors = [
                "a.bouton-validation-190[title='R√©pondre √† la consultation']",
                "a[onclick*='openModal'][title='R√©pondre √† la consultation']",
                "a[onclick*='modal-select-lots']",
                ".float-right a.bouton-validation-190",
                "a:contains('R√©pondre √† la consultation')",
                "//a[contains(text(), 'R√©pondre √† la consultation')]",
                "//a[@title='R√©pondre √† la consultation']",
                "//a[contains(@onclick, 'openModal')]",
            ]
            
            repondre_element = None
            used_selector = None
            
            for selector in selectors:
                try:
                    if selector.startswith("//"):
                        # XPath
                        repondre_element = self.wait.until(
                            EC.element_to_be_clickable((By.XPATH, selector))
                        )
                    else:
                        # CSS Selector
                        repondre_element = self.wait.until(
                            EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                        )
                    
                    used_selector = selector
                    break
                    
                except TimeoutException:
                    continue
            
            if not repondre_element:
                raise Exception("Impossible de trouver le bouton 'R√©pondre √† la consultation'")
            
            logger.info(f"‚úÖ Bouton 'R√©pondre √† la consultation' trouv√© avec: {used_selector}")
            
            # Scroll vers l'√©l√©ment
            self.driver.execute_script("arguments[0].scrollIntoView(true);", repondre_element)
            time.sleep(1)
            
            # Tentatives de clic
            click_success = False
            
            # M√©thode 1: Clic normal
            try:
                repondre_element.click()
                click_success = True
                logger.info("‚úÖ Clic normal sur 'R√©pondre √† la consultation' r√©ussi")
            except ElementClickInterceptedException:
                logger.warning("‚ö†Ô∏è Clic normal intercept√©, tentative avec JavaScript...")
                
                # M√©thode 2: Clic JavaScript
                try:
                    self.driver.execute_script("arguments[0].click();", repondre_element)
                    click_success = True
                    logger.info("‚úÖ Clic JavaScript sur 'R√©pondre √† la consultation' r√©ussi")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Clic JavaScript √©chou√©: {str(e)}")
            
            if not click_success:
                # M√©thode 3: D√©clencher l'√©v√©nement onclick directement
                try:
                    onclick_value = repondre_element.get_attribute("onclick")
                    if onclick_value:
                        # Ex√©cuter le code onclick
                        self.driver.execute_script(onclick_value)
                        click_success = True
                        logger.info("‚úÖ Ex√©cution du onclick directe r√©ussie")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Ex√©cution onclick √©chou√©e: {str(e)}")
            
            if not click_success:
                raise Exception("Toutes les m√©thodes de clic ont √©chou√©")
            
            # Attendre l'ouverture de la modal
            time.sleep(3)
            
            logger.info("‚úÖ Bouton 'R√©pondre √† la consultation' cliqu√© avec succ√®s")
            self.results['steps_completed'].append("Clic sur 'R√©pondre √† la consultation'")
            
            return True
            
        except Exception as e:
            error_msg = f"‚ùå Erreur lors du clic sur 'R√©pondre √† la consultation': {str(e)}"
            logger.error(error_msg)
            self.results['errors'].append(error_msg)
            return False

    def click_pieces_libres_buttons(self):
        """D√©tecte et clique sur tous les boutons 'Ajouter une ou plusieurs pi√®ces libres'"""
        try:
            logger.info("üéØ Recherche des boutons 'Ajouter une ou plusieurs pi√®ces libres'...")
            
            # Attendre un peu pour s'assurer que la page est bien charg√©e
            time.sleep(3)
            
            # NOUVEAU: Extraire le mapping boutons -> dossiers AVANT de cliquer
            self.extract_button_folder_mapping()
            
            # S√©lecteurs pour d√©tecter les boutons "Ajouter une ou plusieurs pi√®ces libres"
            selectors = [
                "a.ajout-el[href='#']:contains('Ajouter une ou plusieurs pi√®ces libres')",
                "a.ajout-el[onclick*='ajouterPieceLibreApplet']",
                "a[id*='ajouterPieceLibreApplet']",
                "//a[contains(text(), 'Ajouter une ou plusieurs pi√®ces libres')]",
                "//a[@class='ajout-el' and contains(@onclick, 'ajouterPieceLibreApplet')]"
            ]
            
            pieces_libres_buttons = []
            
            # Essayer chaque s√©lecteur pour trouver tous les boutons
            for selector in selectors:
                try:
                    if selector.startswith("//"):
                        # XPath
                        buttons = self.driver.find_elements(By.XPATH, selector)
                    else:
                        # CSS Selector
                        buttons = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    
                    if buttons:
                        logger.info(f"‚úÖ Trouv√© {len(buttons)} bouton(s) avec le s√©lecteur: {selector}")
                        pieces_libres_buttons.extend(buttons)
                        break
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur avec le s√©lecteur {selector}: {str(e)}")
                    continue
            
            # Supprimer les doublons en utilisant les IDs
            unique_buttons = []
            seen_ids = set()
            
            for button in pieces_libres_buttons:
                button_id = button.get_attribute("id")
                if button_id and button_id not in seen_ids:
                    unique_buttons.append(button)
                    seen_ids.add(button_id)
                elif not button_id:
                    # Si pas d'ID, v√©rifier l'onclick pour √©viter les doublons
                    onclick = button.get_attribute("onclick")
                    if onclick and onclick not in [b.get_attribute("onclick") for b in unique_buttons]:
                        unique_buttons.append(button)
            
            if not unique_buttons:
                logger.warning("‚ö†Ô∏è Aucun bouton 'Ajouter une ou plusieurs pi√®ces libres' trouv√©")
                return True  # On continue m√™me si pas de boutons trouv√©s
            
            logger.info(f"üìã Total de {len(unique_buttons)} bouton(s) unique(s) 'Ajouter une ou plusieurs pi√®ces libres' d√©tect√©(s)")
            
            # Cliquer sur chaque bouton une seule fois avec 15 secondes d'attente entre chaque
            clicked_count = 0
            
            for i, button in enumerate(unique_buttons, 1):
                try:
                    button_id = button.get_attribute("id") or f"button_{i}"
                    logger.info(f"üñ±Ô∏è Clic sur le bouton {i}/{len(unique_buttons)} (ID: {button_id})...")
                    
                    # Afficher le dossier correspondant
                    if button_id in self.button_folder_mapping:
                        folder_name = self.button_folder_mapping[button_id]
                        logger.info(f"üìÅ Dossier correspondant: {folder_name}")
                    else:
                        logger.warning(f"‚ö†Ô∏è Aucun dossier mapp√© pour le bouton {button_id}")
                    
                    # Scroll vers l'√©l√©ment pour s'assurer qu'il est visible
                    self.driver.execute_script("arguments[0].scrollIntoView(true);", button)
                    time.sleep(1)
                    
                    # V√©rifier si le bouton est cliquable
                    if not button.is_displayed() or not button.is_enabled():
                        logger.warning(f"‚ö†Ô∏è Le bouton {i} n'est pas cliquable, passage au suivant")
                        continue
                    
                    # Tentatives de clic
                    click_success = False
                    
                    # M√©thode 1: Clic normal
                    try:
                        button.click()
                        click_success = True
                        logger.info(f"‚úÖ Clic normal sur le bouton {i} r√©ussi")
                    except ElementClickInterceptedException:
                        logger.warning(f"‚ö†Ô∏è Clic normal intercept√© pour le bouton {i}, tentative avec JavaScript...")
                        
                        # M√©thode 2: Clic JavaScript
                        try:
                            self.driver.execute_script("arguments[0].click();", button)
                            click_success = True
                            logger.info(f"‚úÖ Clic JavaScript sur le bouton {i} r√©ussi")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Clic JavaScript √©chou√© pour le bouton {i}: {str(e)}")
                    
                    if not click_success:
                        # M√©thode 3: Ex√©cuter l'onclick directement
                        try:
                            onclick_value = button.get_attribute("onclick")
                            if onclick_value:
                                # Nettoyer le code onclick
                                js_code = onclick_value.replace("return false", "").replace("return true", "")
                                self.driver.execute_script(js_code)
                                click_success = True
                                logger.info(f"‚úÖ Ex√©cution onclick directe pour le bouton {i} r√©ussie")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Ex√©cution onclick √©chou√©e pour le bouton {i}: {str(e)}")
                    
                    if click_success:
                        clicked_count += 1
                        logger.info(f"üéâ Bouton {i} cliqu√© avec succ√®s!")
                        
                        # GESTION DU POPUP SYST√àME AVEC PYAUTOGUI apr√®s chaque clic r√©ussi
                        # NOUVEAU: Passer l'ID du bouton pour utiliser le bon dossier
                        self.handle_system_popup(button_id)
                        
                        # Attendre 15 secondes pour choisir un fichier avant de passer au bouton suivant
                        if i < len(unique_buttons):  # Ne pas attendre apr√®s le dernier bouton
                            logger.info("‚è≥ Attente de 15 secondes pour choisir un fichier avant le prochain bouton...")
                            time.sleep(15)
                    else:
                        logger.error(f"‚ùå Impossible de cliquer sur le bouton {i}")
                        
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors du clic sur le bouton {i}: {str(e)}")
                    continue
            
            # R√©sum√©
            logger.info(f"üìä R√©sum√©: {clicked_count}/{len(unique_buttons)} bouton(s) cliqu√©(s) avec succ√®s")
            
            if clicked_count > 0:
                self.results['steps_completed'].append(f"Clic r√©ussi sur {clicked_count} bouton(s) 'Ajouter une ou plusieurs pi√®ces libres'")
                logger.info("‚úÖ Traitement des boutons 'Ajouter une ou plusieurs pi√®ces libres' termin√© avec succ√®s")
            else:
                logger.warning("‚ö†Ô∏è Aucun bouton n'a pu √™tre cliqu√©")
            
            return True
            
        except Exception as e:
            error_msg = f"‚ùå Erreur lors du traitement des boutons 'Ajouter une ou plusieurs pi√®ces libres': {str(e)}"
            logger.error(error_msg)
            self.results['errors'].append(error_msg)
            return False

    def run_automation(self, consultation_url, marche_reference):
        """Ex√©cute le processus d'automatisation complet"""
        try:
            logger.info(f"üöÄ D√âBUT DE L'AUTOMATISATION CONSULTATION")
            logger.info(f"URL: {consultation_url}")
            logger.info(f"R√©f√©rence march√©: {marche_reference}")
            
            # Stocker la r√©f√©rence pass√©e en param√®tre comme fallback
            self.marche_reference = marche_reference
            self.results['marche_reference'] = marche_reference
            self.results['consultation_url'] = consultation_url
            
            # √âtape 1: Configuration du driver
            self.setup_driver()
            
            # √âtape 2: Navigation vers la consultation
            if not self.navigate_to_consultation(consultation_url):
                raise Exception("√âchec de la navigation")
            
            # √âtape 3: Clic sur l'onglet D√©p√¥t
            if not self.click_depot_tab():
                raise Exception("√âchec du clic sur l'onglet D√©p√¥t")
            
            # √âtape 4: Attente du chargement complet
            if not self.wait_for_page_complete_load():
                raise Exception("√âchec de l'attente du chargement")
            
            # √âtape 5: Clic sur 'R√©pondre √† la consultation'
            if not self.click_repondre_consultation():
                raise Exception("√âchec du clic sur 'R√©pondre √† la consultation'")
            
            # √âtape 6: Login
            if not self.login_user():
                raise Exception("√âchec du login")
            
            # √âtape 7: Clic sur les boutons "Ajouter une ou plusieurs pi√®ces libres"
            if not self.click_pieces_libres_buttons():
                logger.warning("‚ö†Ô∏è Probl√®me avec les boutons 'Ajouter une ou plusieurs pi√®ces libres', mais on continue...")
            
            # Succ√®s !
            self.results['success'] = True
            self.results['message'] = "Automatisation termin√©e avec succ√®s ! Tous les boutons 'Ajouter une ou plusieurs pi√®ces libres' ont √©t√© cliqu√©s avec les bons dossiers."
            
            logger.info("üéâ AUTOMATISATION TERMIN√âE AVEC SUCC√àS !")
            
            # Attendre 40 secondes pour bien voir la page avant de fermer
            logger.info("‚è≥ Attente de 40 secondes pour visualiser la page finale...")
            time.sleep(40)
            
        except Exception as e:
            error_msg = f"‚ùå ERREUR G√âN√âRALE: {str(e)}"
            logger.error(error_msg)
            self.results['success'] = False
            self.results['message'] = error_msg
            self.results['errors'].append(error_msg)
        
        finally:
            self.cleanup()

    def cleanup(self):
        """Nettoie les ressources"""
        try:
            if self.driver:
                logger.info("üßπ Fermeture du navigateur...")
                self.driver.quit()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la fermeture: {str(e)}")

    def save_results(self):
        """Sauvegarde les r√©sultats en JSON"""
        try:
            results_file = "consultation_automation_results.json"
            with open(results_file, 'w', encoding='utf-8') as f:
                json.dump(self.results, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üìÑ R√©sultats sauvegard√©s dans: {results_file}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la sauvegarde: {str(e)}")

def main():
    if len(sys.argv) != 3:
        print("‚ùå Usage: python consultation_automation.py <consultation_url> <marche_reference>")
        sys.exit(1)

    consultation_url = sys.argv[1]
    marche_reference = sys.argv[2]

    automation = ConsultationAutomation()

    try:
        automation.run_automation(consultation_url, marche_reference)
    finally:
        automation.save_results()
        
        # Afficher le r√©sum√©
        print("\n" + "="*50)
        print("üìä R√âSUM√â DE L'AUTOMATISATION")
        print("="*50)
        print(f"‚úÖ Succ√®s: {automation.results['success']}")
        print(f"üìù Message: {automation.results['message']}")
        print(f"üìã √âtapes compl√©t√©es: {len(automation.results['steps_completed'])}")
        
        if automation.results['steps_completed']:
            for step in automation.results['steps_completed']:
                print(f"   ‚úì {step}")
        
        if automation.results['errors']:
            print(f"‚ùå Erreurs ({len(automation.results['errors'])}):")
            for error in automation.results['errors']:
                print(f"   ‚úó {error}")
        
        print("="*50)
        
        # Code de sortie
        sys.exit(0 if automation.results['success'] else 1)

if __name__ == "__main__":
    main()